{"ast":null,"code":"// src/utils/translateSrt.ts\n\nimport { createOpenAIClient } from './openaiConfig';\nexport const translateSrt = async (content, apiKey, targetLanguage, onProgress) => {\n  const openai = createOpenAIClient(apiKey);\n  try {\n    var _completion$choices$, _completion$choices$$;\n    onProgress(50); // Set progress to 50% when starting translation\n\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [{\n        role: \"system\",\n        content: `You are a professional subtitle translator. Translate the following SRT content to ${targetLanguage}. Maintain the exact same timing and formatting.`\n      }, {\n        role: \"user\",\n        content: content\n      }]\n    });\n    onProgress(100); // Set progress to 100% when done\n    console.log(completion);\n    return ((_completion$choices$ = completion.choices[0]) === null || _completion$choices$ === void 0 ? void 0 : (_completion$choices$$ = _completion$choices$.message) === null || _completion$choices$$ === void 0 ? void 0 : _completion$choices$$.content) || '';\n  } catch (error) {\n    console.log(error);\n    throw new Error('Translation failed: ' + error.message);\n  }\n};","map":{"version":3,"names":["createOpenAIClient","translateSrt","content","apiKey","targetLanguage","onProgress","openai","_completion$choices$","_completion$choices$$","completion","chat","completions","create","model","messages","role","console","log","choices","message","error","Error"],"sources":["/home/user/srt-translator/src/utils/translateSrt.ts"],"sourcesContent":["// src/utils/translateSrt.ts\nimport { Language } from '../types';\nimport { createOpenAIClient } from './openaiConfig';\n\nexport const translateSrt = async (\n  content: string,\n  apiKey: string,\n  targetLanguage: Language,\n  onProgress: (progress: number) => void\n): Promise<string> => {\n  const openai = createOpenAIClient(apiKey);\n  \n  try {\n    onProgress(50); // Set progress to 50% when starting translation\n    \n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a professional subtitle translator. Translate the following SRT content to ${targetLanguage}. Maintain the exact same timing and formatting.`\n        },\n        {\n          role: \"user\",\n          content: content\n        }\n      ],\n    });\n\n    onProgress(100); // Set progress to 100% when done\n    console.log(completion);\n    \n    return completion.choices[0]?.message?.content || '';\n  } catch (error) {\n    console.log(error);\n    \n    throw new Error('Translation failed: ' + (error as Error).message);\n  }\n};"],"mappings":"AAAA;;AAEA,SAASA,kBAAkB,QAAQ,gBAAgB;AAEnD,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAC1BC,OAAe,EACfC,MAAc,EACdC,cAAwB,EACxBC,UAAsC,KAClB;EACpB,MAAMC,MAAM,GAAGN,kBAAkB,CAACG,MAAM,CAAC;EAEzC,IAAI;IAAA,IAAAI,oBAAA,EAAAC,qBAAA;IACFH,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEhB,MAAMI,UAAU,GAAG,MAAMH,MAAM,CAACI,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;MACtDC,KAAK,EAAE,QAAQ;MACfC,QAAQ,EAAE,CACR;QACEC,IAAI,EAAE,QAAQ;QACdb,OAAO,EAAE,sFAAsFE,cAAc;MAC/G,CAAC,EACD;QACEW,IAAI,EAAE,MAAM;QACZb,OAAO,EAAEA;MACX,CAAC;IAEL,CAAC,CAAC;IAEFG,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;IACjBW,OAAO,CAACC,GAAG,CAACR,UAAU,CAAC;IAEvB,OAAO,EAAAF,oBAAA,GAAAE,UAAU,CAACS,OAAO,CAAC,CAAC,CAAC,cAAAX,oBAAA,wBAAAC,qBAAA,GAArBD,oBAAA,CAAuBY,OAAO,cAAAX,qBAAA,uBAA9BA,qBAAA,CAAgCN,OAAO,KAAI,EAAE;EACtD,CAAC,CAAC,OAAOkB,KAAK,EAAE;IACdJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;IAElB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,GAAID,KAAK,CAAWD,OAAO,CAAC;EACpE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}