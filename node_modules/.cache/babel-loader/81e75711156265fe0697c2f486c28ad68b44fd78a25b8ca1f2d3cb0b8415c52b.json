{"ast":null,"code":"var _jsxFileName = \"/home/user/srt-translator/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { TextField, Button, Typography, Alert, CircularProgress } from \"@mui/material\";\nimport FileUploader from \"./components/FileUploader\";\nimport LanguageSelector from \"./components/LanguageSelector\";\nimport { translateSrt } from \"./utils/translateSrt\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [apiKey, setApiKey] = useState(\"\");\n  const [language, setLanguage] = useState(\"fr\"); // Use language code, not the full name\n  const [fileContent, setFileContent] = useState(null);\n  const [translatedText, setTranslatedText] = useState(null);\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false); // New state for loading\n\n  const handleFileUpload = async file => {\n    if (!file) {\n      setError(\"No file selected.\");\n      return;\n    }\n    try {\n      const content = await file.text();\n      setFileContent(content);\n      console.log(\"Extracted File Content:\", content);\n    } catch (err) {\n      console.error(\"Error extracting file content:\", err);\n      setError(\"Failed to read file content.\");\n    }\n  };\n  const handleApiKeyCheck = async () => {\n    try {\n      const response = await fetch(\"https://api.openai.com/v1/models\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${apiKey}`\n        }\n      });\n      alert(response.ok ? \"API Key is valid!\" : \"Invalid API Key.\");\n    } catch (err) {\n      console.error(\"API Key check failed:\", err);\n      alert(\"Error checking API key.\");\n    }\n  };\n  const handleTranslation = async () => {\n    setError(\"\");\n    setLoading(true); // Ensure loading state is set at the beginning\n\n    if (!fileContent) {\n      setError(\"No file uploaded for translation.\");\n      setLoading(false); // Reset loading state if there's an error\n      return;\n    }\n    try {\n      console.log(\"Starting Translation...\");\n      const translated = await translateSrt(fileContent, apiKey, language);\n      if (!translated) {\n        throw new Error(\"Empty translation result.\");\n      }\n      setTranslatedText(translated);\n      console.log(\"Translation Response:\", translated);\n    } catch (err) {\n      console.error(\"Translation failed:\", err);\n      setError(\"Translation failed. Please try again.\");\n    } finally {\n      setLoading(false); // Always reset loading state after the process completes\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: \"SRT Translator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FileUploader, {\n      onFileSelect: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), fileContent && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Extracted File Content:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: fileContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"OpenAI API Key\",\n      fullWidth: true,\n      margin: \"normal\",\n      value: apiKey,\n      onChange: e => setApiKey(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: handleApiKeyCheck,\n      style: {\n        marginBottom: 10\n      },\n      children: \"Check API Key\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LanguageSelector, {\n      language: language,\n      setLanguage: setLanguage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 20\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleTranslation,\n        disabled: loading // Disable button while loading\n        ,\n        children: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 24,\n          color: \"inherit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this) // Loading spinner\n        : \"Translate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      style: {\n        marginTop: 20\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }, this), translatedText && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Translated Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: translatedText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"/Q9MJVAbO8dssDk/tqsYLk/PLIw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TextField","Button","Typography","Alert","CircularProgress","FileUploader","LanguageSelector","translateSrt","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","apiKey","setApiKey","language","setLanguage","fileContent","setFileContent","translatedText","setTranslatedText","error","setError","loading","setLoading","handleFileUpload","file","content","text","console","log","err","handleApiKeyCheck","response","fetch","method","headers","Authorization","alert","ok","handleTranslation","translated","Error","style","padding","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","onFileSelect","label","fullWidth","margin","value","onChange","e","target","onClick","marginBottom","marginTop","disabled","size","color","severity","_c","$RefreshReg$"],"sources":["/home/user/srt-translator/src/App.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { TextField, Button, Typography, Alert, CircularProgress } from \"@mui/material\";\nimport FileUploader from \"./components/FileUploader\";\nimport LanguageSelector from \"./components/LanguageSelector\";\nimport { translateSrt } from \"./utils/translateSrt\";\n\nconst App = () => {\n  const [apiKey, setApiKey] = useState(\"\");\n  const [language, setLanguage] = useState(\"fr\"); // Use language code, not the full name\n  const [fileContent, setFileContent] = useState<string | null>(null);\n  const [translatedText, setTranslatedText] = useState<string | null>(null);\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false); // New state for loading\n\n  const handleFileUpload = async (file: File | null) => {\n    if (!file) {\n      setError(\"No file selected.\");\n      return;\n    }\n    try {\n      const content = await file.text();\n      setFileContent(content);\n      console.log(\"Extracted File Content:\", content);\n    } catch (err) {\n      console.error(\"Error extracting file content:\", err);\n      setError(\"Failed to read file content.\");\n    }\n  };\n\n  const handleApiKeyCheck = async () => {\n    try {\n      const response = await fetch(\"https://api.openai.com/v1/models\", {\n        method: \"GET\",\n        headers: { Authorization: `Bearer ${apiKey}` },\n      });\n      alert(response.ok ? \"API Key is valid!\" : \"Invalid API Key.\");\n    } catch (err) {\n      console.error(\"API Key check failed:\", err);\n      alert(\"Error checking API key.\");\n    }\n  };\n\n  const handleTranslation = async () => {\n    setError(\"\");\n    setLoading(true); // Ensure loading state is set at the beginning\n\n    if (!fileContent) {\n      setError(\"No file uploaded for translation.\");\n      setLoading(false); // Reset loading state if there's an error\n      return;\n    }\n\n    try {\n      console.log(\"Starting Translation...\");\n      const translated = await translateSrt(fileContent, apiKey, language);\n\n      if (!translated) {\n        throw new Error(\"Empty translation result.\");\n      }\n\n      setTranslatedText(translated);\n      console.log(\"Translation Response:\", translated);\n    } catch (err) {\n      console.error(\"Translation failed:\", err);\n      setError(\"Translation failed. Please try again.\");\n    } finally {\n      setLoading(false); // Always reset loading state after the process completes\n    }\n  };\n\n  return (\n    <div style={{ padding: 20 }}>\n      <Typography variant=\"h4\">SRT Translator</Typography>\n\n      <FileUploader onFileSelect={handleFileUpload} />\n\n      {fileContent && (\n        <>\n          <Typography variant=\"h6\">Extracted File Content:</Typography>\n          <pre>{fileContent}</pre>\n        </>\n      )}\n\n      <TextField\n        label=\"OpenAI API Key\"\n        fullWidth\n        margin=\"normal\"\n        value={apiKey}\n        onChange={(e) => setApiKey(e.target.value)}\n      />\n\n      <Button variant=\"contained\" onClick={handleApiKeyCheck} style={{ marginBottom: 10 }}>\n        Check API Key\n      </Button>\n\n      <LanguageSelector language={language} setLanguage={setLanguage} />\n\n      <div style={{ marginTop: 20 }}>\n        <Button\n          variant=\"contained\"\n          onClick={handleTranslation}\n          disabled={loading} // Disable button while loading\n        >\n          {loading ? (\n            <CircularProgress size={24} color=\"inherit\" /> // Loading spinner\n          ) : (\n            \"Translate\"\n          )}\n        </Button>\n      </div>\n\n      {error && <Alert severity=\"error\" style={{ marginTop: 20 }}>{error}</Alert>}\n\n      {translatedText && (\n        <>\n          <Typography variant=\"h6\">Translated Text:</Typography>\n          <pre>{translatedText}</pre>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}