{"ast":null,"code":"const fetchTranslation = async (text, targetLanguage) => {\n  const apiKey = 'your-api-key-here';\n  const url = 'https://api.openai.com/v1/chat/completions';\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${apiKey}`\n  };\n  const body = JSON.stringify({\n    model: 'gpt-3.5-turbo',\n    messages: [{\n      role: 'system',\n      content: `You are an SRT translator. Translate the following subtitles to ${targetLanguage}:`\n    }, {\n      role: 'user',\n      content: text\n    }]\n  });\n  let retryAttempts = 0;\n  const maxRetries = 5;\n  const waitTime = 10000; // 10 seconds wait time for retries\n\n  while (retryAttempts < maxRetries) {\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers,\n        body\n      });\n      if (response.ok) {\n        var _data$choices$, _data$choices$$messag;\n        const data = await response.json();\n        console.log('Full API Response:', data);\n        const translatedText = (_data$choices$ = data.choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content;\n        if (!translatedText) {\n          throw new Error('Empty translation result');\n        }\n        return translatedText;\n      } else {\n        if (response.status === 429) {\n          const retryAfter = response.headers.get('Retry-After');\n          console.error(`Rate limit exceeded. Retrying in ${waitTime / 1000} seconds...`);\n          await new Promise(resolve => setTimeout(resolve, retryAfter ? parseInt(retryAfter, 10) * 1000 : waitTime));\n        } else {\n          throw new Error(`Translation failed with status code ${response.status}`);\n        }\n      }\n    } catch (error) {\n      retryAttempts++;\n      console.error(`Error during translation attempt ${retryAttempts}:`, error);\n      if (retryAttempts >= maxRetries) {\n        throw new Error('Max retry attempts reached. Translation failed.');\n      }\n      await new Promise(resolve => setTimeout(resolve, waitTime)); // retry delay\n    }\n  }\n};\nexport default fetchTranslation;","map":{"version":3,"names":["fetchTranslation","text","targetLanguage","apiKey","url","headers","body","JSON","stringify","model","messages","role","content","retryAttempts","maxRetries","waitTime","response","fetch","method","ok","_data$choices$","_data$choices$$messag","data","json","console","log","translatedText","choices","message","Error","status","retryAfter","get","error","Promise","resolve","setTimeout","parseInt"],"sources":["/home/user/srt-translator/src/utils/translateSrt.ts"],"sourcesContent":["const fetchTranslation = async (text: string, targetLanguage: string) => {\n  const apiKey = 'your-api-key-here';\n  const url = 'https://api.openai.com/v1/chat/completions';\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${apiKey}`,\n  };\n\n  const body = JSON.stringify({\n    model: 'gpt-3.5-turbo',\n    messages: [\n      { role: 'system', content: `You are an SRT translator. Translate the following subtitles to ${targetLanguage}:` },\n      { role: 'user', content: text },\n    ],\n  });\n\n  let retryAttempts = 0;\n  const maxRetries = 5;\n  const waitTime = 10000; // 10 seconds wait time for retries\n\n  while (retryAttempts < maxRetries) {\n    try {\n      const response = await fetch(url, { method: 'POST', headers, body });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Full API Response:', data);\n        const translatedText = data.choices[0]?.message?.content;\n        if (!translatedText) {\n          throw new Error('Empty translation result');\n        }\n        return translatedText;\n      } else {\n        if (response.status === 429) {\n          const retryAfter = response.headers.get('Retry-After');\n          console.error(`Rate limit exceeded. Retrying in ${waitTime / 1000} seconds...`);\n          await new Promise(resolve => setTimeout(resolve, retryAfter ? parseInt(retryAfter, 10) * 1000 : waitTime));\n        } else {\n          throw new Error(`Translation failed with status code ${response.status}`);\n        }\n      }\n    } catch (error) {\n      retryAttempts++;\n      console.error(`Error during translation attempt ${retryAttempts}:`, error);\n      if (retryAttempts >= maxRetries) {\n        throw new Error('Max retry attempts reached. Translation failed.');\n      }\n      await new Promise(resolve => setTimeout(resolve, waitTime)); // retry delay\n    }\n  }\n};\n\nexport default fetchTranslation;\n"],"mappings":"AAAA,MAAMA,gBAAgB,GAAG,MAAAA,CAAOC,IAAY,EAAEC,cAAsB,KAAK;EACvE,MAAMC,MAAM,GAAG,mBAAmB;EAClC,MAAMC,GAAG,GAAG,4CAA4C;EACxD,MAAMC,OAAO,GAAG;IACd,cAAc,EAAE,kBAAkB;IAClC,eAAe,EAAE,UAAUF,MAAM;EACnC,CAAC;EAED,MAAMG,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;IAC1BC,KAAK,EAAE,eAAe;IACtBC,QAAQ,EAAE,CACR;MAAEC,IAAI,EAAE,QAAQ;MAAEC,OAAO,EAAE,mEAAmEV,cAAc;IAAI,CAAC,EACjH;MAAES,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEX;IAAK,CAAC;EAEnC,CAAC,CAAC;EAEF,IAAIY,aAAa,GAAG,CAAC;EACrB,MAAMC,UAAU,GAAG,CAAC;EACpB,MAAMC,QAAQ,GAAG,KAAK,CAAC,CAAC;;EAExB,OAAOF,aAAa,GAAGC,UAAU,EAAE;IACjC,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACb,GAAG,EAAE;QAAEc,MAAM,EAAE,MAAM;QAAEb,OAAO;QAAEC;MAAK,CAAC,CAAC;MACpE,IAAIU,QAAQ,CAACG,EAAE,EAAE;QAAA,IAAAC,cAAA,EAAAC,qBAAA;QACf,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEH,IAAI,CAAC;QACvC,MAAMI,cAAc,IAAAN,cAAA,GAAGE,IAAI,CAACK,OAAO,CAAC,CAAC,CAAC,cAAAP,cAAA,wBAAAC,qBAAA,GAAfD,cAAA,CAAiBQ,OAAO,cAAAP,qBAAA,uBAAxBA,qBAAA,CAA0BT,OAAO;QACxD,IAAI,CAACc,cAAc,EAAE;UACnB,MAAM,IAAIG,KAAK,CAAC,0BAA0B,CAAC;QAC7C;QACA,OAAOH,cAAc;MACvB,CAAC,MAAM;QACL,IAAIV,QAAQ,CAACc,MAAM,KAAK,GAAG,EAAE;UAC3B,MAAMC,UAAU,GAAGf,QAAQ,CAACX,OAAO,CAAC2B,GAAG,CAAC,aAAa,CAAC;UACtDR,OAAO,CAACS,KAAK,CAAC,oCAAoClB,QAAQ,GAAG,IAAI,aAAa,CAAC;UAC/E,MAAM,IAAImB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEJ,UAAU,GAAGM,QAAQ,CAACN,UAAU,EAAE,EAAE,CAAC,GAAG,IAAI,GAAGhB,QAAQ,CAAC,CAAC;QAC5G,CAAC,MAAM;UACL,MAAM,IAAIc,KAAK,CAAC,uCAAuCb,QAAQ,CAACc,MAAM,EAAE,CAAC;QAC3E;MACF;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdpB,aAAa,EAAE;MACfW,OAAO,CAACS,KAAK,CAAC,oCAAoCpB,aAAa,GAAG,EAAEoB,KAAK,CAAC;MAC1E,IAAIpB,aAAa,IAAIC,UAAU,EAAE;QAC/B,MAAM,IAAIe,KAAK,CAAC,iDAAiD,CAAC;MACpE;MACA,MAAM,IAAIK,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEpB,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC/D;EACF;AACF,CAAC;AAED,eAAef,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}