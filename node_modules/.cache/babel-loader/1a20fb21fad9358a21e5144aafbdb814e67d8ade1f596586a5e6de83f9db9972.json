{"ast":null,"code":"// src/utils/fileHelpers.ts\nexport const readFileAsText = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = event => {\n      var _event$target;\n      if ((_event$target = event.target) !== null && _event$target !== void 0 && _event$target.result) {\n        resolve(event.target.result);\n      } else {\n        reject(new Error('Failed to read file'));\n      }\n    };\n    reader.onerror = () => {\n      reject(new Error('File reading failed'));\n    };\n    reader.readAsText(file);\n  });\n};\nexport const downloadFile = (content, filename) => {\n  const blob = new Blob([content], {\n    type: 'text/srt'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename.replace('.srt', '_translated.srt');\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};\nexport const validateFileType = file => {\n  return file.name.toLowerCase().endsWith('.srt');\n};\nexport const getFileNameWithoutExtension = filename => {\n  return filename.replace(/\\.[^/.]+$/, '');\n};","map":{"version":3,"names":["readFileAsText","file","Promise","resolve","reject","reader","FileReader","onload","event","_event$target","target","result","Error","onerror","readAsText","downloadFile","content","filename","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","replace","body","appendChild","click","removeChild","revokeObjectURL","validateFileType","name","toLowerCase","endsWith","getFileNameWithoutExtension"],"sources":["/home/user/srt-translator/src/utils/fileHelper.ts"],"sourcesContent":["// src/utils/fileHelpers.ts\nexport const readFileAsText = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      \n      reader.onload = (event) => {\n        if (event.target?.result) {\n          resolve(event.target.result as string);\n        } else {\n          reject(new Error('Failed to read file'));\n        }\n      };\n      \n      reader.onerror = () => {\n        reject(new Error('File reading failed'));\n      };\n      \n      reader.readAsText(file);\n    });\n  };\n  \n  export const downloadFile = (content: string, filename: string): void => {\n    const blob = new Blob([content], { type: 'text/srt' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    \n    link.href = url;\n    link.download = filename.replace('.srt', '_translated.srt');\n    \n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    URL.revokeObjectURL(url);\n  };\n  \n  export const validateFileType = (file: File): boolean => {\n    return file.name.toLowerCase().endsWith('.srt');\n  };\n  \n  export const getFileNameWithoutExtension = (filename: string): string => {\n    return filename.replace(/\\.[^/.]+$/, '');\n  };"],"mappings":"AAAA;AACA,OAAO,MAAMA,cAAc,GAAIC,IAAU,IAAsB;EAC3D,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAE/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAK;MAAA,IAAAC,aAAA;MACzB,KAAAA,aAAA,GAAID,KAAK,CAACE,MAAM,cAAAD,aAAA,eAAZA,aAAA,CAAcE,MAAM,EAAE;QACxBR,OAAO,CAACK,KAAK,CAACE,MAAM,CAACC,MAAgB,CAAC;MACxC,CAAC,MAAM;QACLP,MAAM,CAAC,IAAIQ,KAAK,CAAC,qBAAqB,CAAC,CAAC;MAC1C;IACF,CAAC;IAEDP,MAAM,CAACQ,OAAO,GAAG,MAAM;MACrBT,MAAM,CAAC,IAAIQ,KAAK,CAAC,qBAAqB,CAAC,CAAC;IAC1C,CAAC;IAEDP,MAAM,CAACS,UAAU,CAACb,IAAI,CAAC;EACzB,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMc,YAAY,GAAGA,CAACC,OAAe,EAAEC,QAAgB,KAAW;EACvE,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,OAAO,CAAC,EAAE;IAAEI,IAAI,EAAE;EAAW,CAAC,CAAC;EACtD,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;EACrC,MAAMM,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EAExCF,IAAI,CAACG,IAAI,GAAGN,GAAG;EACfG,IAAI,CAACI,QAAQ,GAAGX,QAAQ,CAACY,OAAO,CAAC,MAAM,EAAE,iBAAiB,CAAC;EAE3DJ,QAAQ,CAACK,IAAI,CAACC,WAAW,CAACP,IAAI,CAAC;EAC/BA,IAAI,CAACQ,KAAK,CAAC,CAAC;EACZP,QAAQ,CAACK,IAAI,CAACG,WAAW,CAACT,IAAI,CAAC;EAE/BF,GAAG,CAACY,eAAe,CAACb,GAAG,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMc,gBAAgB,GAAIlC,IAAU,IAAc;EACvD,OAAOA,IAAI,CAACmC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC;AACjD,CAAC;AAED,OAAO,MAAMC,2BAA2B,GAAItB,QAAgB,IAAa;EACvE,OAAOA,QAAQ,CAACY,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;AAC1C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}