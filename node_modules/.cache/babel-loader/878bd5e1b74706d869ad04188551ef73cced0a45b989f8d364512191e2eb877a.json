{"ast":null,"code":"export const translateSrt = async (fileContent, apiKey, language) => {\n  try {\n    var _data$choices, _data$choices$, _data$choices$$messag;\n    console.log(\"Sending translation request...\");\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${apiKey}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"system\",\n          content: `You are an SRT translator. Translate the following subtitles to ${language}:`\n        }, {\n          role: \"user\",\n          content: fileContent\n        }]\n      })\n    });\n    console.log(\"Received Response:\", response);\n    if (!response.ok) {\n      console.error(\"API Request Failed:\", response.statusText);\n      throw new Error(`API Request failed with status ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(\"API Response Data:\", data);\n    const translatedText = (data === null || data === void 0 ? void 0 : (_data$choices = data.choices) === null || _data$choices === void 0 ? void 0 : (_data$choices$ = _data$choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content) || null;\n    if (!translatedText) {\n      console.error(\"Translation response empty.\");\n      throw new Error(\"No translation found in the response.\");\n    }\n    return translatedText;\n  } catch (error) {\n    console.error(\"Translation Error:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["translateSrt","fileContent","apiKey","language","_data$choices","_data$choices$","_data$choices$$messag","console","log","response","fetch","method","headers","Authorization","body","JSON","stringify","model","messages","role","content","ok","error","statusText","Error","status","data","json","translatedText","choices","message"],"sources":["/home/user/srt-translator/src/utils/translateSrt.ts"],"sourcesContent":["export const translateSrt = async (\n  fileContent: string, \n  apiKey: string, \n  language: string\n): Promise<string | null> => {\n  try {\n    console.log(\"Sending translation request...\");\n\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are an SRT translator. Translate the following subtitles to ${language}:`,\n          },\n          { role: \"user\", content: fileContent },\n        ],\n      }),\n    });\n\n    console.log(\"Received Response:\", response);\n\n    if (!response.ok) {\n      console.error(\"API Request Failed:\", response.statusText);\n      throw new Error(`API Request failed with status ${response.status}`);\n    }\n\n    const data = await response.json();\n    console.log(\"API Response Data:\", data);\n\n    const translatedText = data?.choices?.[0]?.message?.content || null;\n\n    if (!translatedText) {\n      console.error(\"Translation response empty.\");\n      throw new Error(\"No translation found in the response.\");\n    }\n\n    return translatedText;\n  } catch (error) {\n    console.error(\"Translation Error:\", error);\n    throw error; \n  }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG,MAAAA,CAC1BC,WAAmB,EACnBC,MAAc,EACdC,QAAgB,KACW;EAC3B,IAAI;IAAA,IAAAC,aAAA,EAAAC,cAAA,EAAAC,qBAAA;IACFC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAE7C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;MACzEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUX,MAAM;MACjC,CAAC;MACDY,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CACR;UACEC,IAAI,EAAE,QAAQ;UACdC,OAAO,EAAE,mEAAmEjB,QAAQ;QACtF,CAAC,EACD;UAAEgB,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEnB;QAAY,CAAC;MAE1C,CAAC;IACH,CAAC,CAAC;IAEFM,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEC,QAAQ,CAAC;IAE3C,IAAI,CAACA,QAAQ,CAACY,EAAE,EAAE;MAChBd,OAAO,CAACe,KAAK,CAAC,qBAAqB,EAAEb,QAAQ,CAACc,UAAU,CAAC;MACzD,MAAM,IAAIC,KAAK,CAAC,kCAAkCf,QAAQ,CAACgB,MAAM,EAAE,CAAC;IACtE;IAEA,MAAMC,IAAI,GAAG,MAAMjB,QAAQ,CAACkB,IAAI,CAAC,CAAC;IAClCpB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEkB,IAAI,CAAC;IAEvC,MAAME,cAAc,GAAG,CAAAF,IAAI,aAAJA,IAAI,wBAAAtB,aAAA,GAAJsB,IAAI,CAAEG,OAAO,cAAAzB,aAAA,wBAAAC,cAAA,GAAbD,aAAA,CAAgB,CAAC,CAAC,cAAAC,cAAA,wBAAAC,qBAAA,GAAlBD,cAAA,CAAoByB,OAAO,cAAAxB,qBAAA,uBAA3BA,qBAAA,CAA6Bc,OAAO,KAAI,IAAI;IAEnE,IAAI,CAACQ,cAAc,EAAE;MACnBrB,OAAO,CAACe,KAAK,CAAC,6BAA6B,CAAC;MAC5C,MAAM,IAAIE,KAAK,CAAC,uCAAuC,CAAC;IAC1D;IAEA,OAAOI,cAAc;EACvB,CAAC,CAAC,OAAON,KAAK,EAAE;IACdf,OAAO,CAACe,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}