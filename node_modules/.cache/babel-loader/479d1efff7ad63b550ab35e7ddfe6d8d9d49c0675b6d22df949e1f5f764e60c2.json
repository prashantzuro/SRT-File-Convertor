{"ast":null,"code":"export const translateSrt = async (fileContent, apiKey, language) => {\n  const maxRetries = 3;\n  let attempts = 0;\n  while (attempts < maxRetries) {\n    try {\n      var _data$choices, _data$choices$, _data$choices$$messag;\n      console.log(\"Sending translation request...\");\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          messages: [{\n            role: \"system\",\n            content: `You are an SRT translator. Translate the following subtitles to ${language}:`\n          }, {\n            role: \"user\",\n            content: fileContent\n          }]\n        })\n      });\n\n      // Check for 429 rate limit error\n      if (response.status === 429) {\n        const retryAfter = response.headers.get(\"Retry-After\");\n        const waitTime = retryAfter ? parseInt(retryAfter, 10) * 1000 : 10000; // 10 seconds default\n        console.warn(`Rate limit exceeded. Retrying in ${waitTime / 1000} seconds...`);\n        attempts += 1;\n        await new Promise(resolve => setTimeout(resolve, waitTime)); // Wait before retrying\n        continue; // Retry the request\n      }\n      if (!response.ok) {\n        console.error(\"API Request Failed:\", response.statusText);\n        throw new Error(`API Request failed with status ${response.status}`);\n      }\n\n      // Parse the API response\n      const data = await response.json();\n      console.log(\"Full API Response:\", data);\n      const translatedText = (data === null || data === void 0 ? void 0 : (_data$choices = data.choices) === null || _data$choices === void 0 ? void 0 : (_data$choices$ = _data$choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content) || null;\n\n      // Display the translated text to verify the response\n      if (translatedText) {\n        console.log(\"Translation Success:\", translatedText);\n        return translatedText;\n      } else {\n        console.error(\"No translation found in the response.\");\n        throw new Error(\"No translation found in the response.\");\n      }\n    } catch (error) {\n      console.error(\"Translation Error:\", error);\n      if (attempts === maxRetries - 1) {\n        throw new Error(\"Max retries reached. Translation failed.\");\n      }\n    }\n  }\n  return null; // If all retries fail\n};","map":{"version":3,"names":["translateSrt","fileContent","apiKey","language","maxRetries","attempts","_data$choices","_data$choices$","_data$choices$$messag","console","log","response","fetch","method","headers","Authorization","body","JSON","stringify","model","messages","role","content","status","retryAfter","get","waitTime","parseInt","warn","Promise","resolve","setTimeout","ok","error","statusText","Error","data","json","translatedText","choices","message"],"sources":["/home/user/srt-translator/src/utils/translateSrt.ts"],"sourcesContent":["export const translateSrt = async (\n  fileContent: string, \n  apiKey: string, \n  language: string\n): Promise<string | null> => {\n  const maxRetries = 3;\n  let attempts = 0;\n\n  while (attempts < maxRetries) {\n    try {\n      console.log(\"Sending translation request...\");\n\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${apiKey}`,\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          messages: [\n            {\n              role: \"system\",\n              content: `You are an SRT translator. Translate the following subtitles to ${language}:`,\n            },\n            { role: \"user\", content: fileContent },\n          ],\n        }),\n      });\n\n      // Check for 429 rate limit error\n      if (response.status === 429) {\n        const retryAfter = response.headers.get(\"Retry-After\");\n        const waitTime = retryAfter ? parseInt(retryAfter, 10) * 1000 : 10000; // 10 seconds default\n        console.warn(`Rate limit exceeded. Retrying in ${waitTime / 1000} seconds...`);\n        \n        attempts += 1;\n        await new Promise(resolve => setTimeout(resolve, waitTime)); // Wait before retrying\n        continue; // Retry the request\n      }\n\n      if (!response.ok) {\n        console.error(\"API Request Failed:\", response.statusText);\n        throw new Error(`API Request failed with status ${response.status}`);\n      }\n\n      // Parse the API response\n      const data = await response.json();\nconsole.log(\"Full API Response:\", data);\n\n      const translatedText = data?.choices?.[0]?.message?.content || null;\n\n      // Display the translated text to verify the response\n      if (translatedText) {\n        console.log(\"Translation Success:\", translatedText);\n        return translatedText;\n      } else {\n        console.error(\"No translation found in the response.\");\n        throw new Error(\"No translation found in the response.\");\n      }\n\n    } catch (error) {\n      console.error(\"Translation Error:\", error);\n      if (attempts === maxRetries - 1) {\n        throw new Error(\"Max retries reached. Translation failed.\");\n      }\n    }\n  }\n  return null; // If all retries fail\n};\n"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG,MAAAA,CAC1BC,WAAmB,EACnBC,MAAc,EACdC,QAAgB,KACW;EAC3B,MAAMC,UAAU,GAAG,CAAC;EACpB,IAAIC,QAAQ,GAAG,CAAC;EAEhB,OAAOA,QAAQ,GAAGD,UAAU,EAAE;IAC5B,IAAI;MAAA,IAAAE,aAAA,EAAAC,cAAA,EAAAC,qBAAA;MACFC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAE7C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;QACzEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,UAAUb,MAAM;QACjC,CAAC;QACDc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,KAAK,EAAE,eAAe;UACtBC,QAAQ,EAAE,CACR;YACEC,IAAI,EAAE,QAAQ;YACdC,OAAO,EAAE,mEAAmEnB,QAAQ;UACtF,CAAC,EACD;YAAEkB,IAAI,EAAE,MAAM;YAAEC,OAAO,EAAErB;UAAY,CAAC;QAE1C,CAAC;MACH,CAAC,CAAC;;MAEF;MACA,IAAIU,QAAQ,CAACY,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMC,UAAU,GAAGb,QAAQ,CAACG,OAAO,CAACW,GAAG,CAAC,aAAa,CAAC;QACtD,MAAMC,QAAQ,GAAGF,UAAU,GAAGG,QAAQ,CAACH,UAAU,EAAE,EAAE,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC,CAAC;QACvEf,OAAO,CAACmB,IAAI,CAAC,oCAAoCF,QAAQ,GAAG,IAAI,aAAa,CAAC;QAE9ErB,QAAQ,IAAI,CAAC;QACb,MAAM,IAAIwB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEJ,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC7D,SAAS,CAAC;MACZ;MAEA,IAAI,CAACf,QAAQ,CAACqB,EAAE,EAAE;QAChBvB,OAAO,CAACwB,KAAK,CAAC,qBAAqB,EAAEtB,QAAQ,CAACuB,UAAU,CAAC;QACzD,MAAM,IAAIC,KAAK,CAAC,kCAAkCxB,QAAQ,CAACY,MAAM,EAAE,CAAC;MACtE;;MAEA;MACA,MAAMa,IAAI,GAAG,MAAMzB,QAAQ,CAAC0B,IAAI,CAAC,CAAC;MACxC5B,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE0B,IAAI,CAAC;MAEjC,MAAME,cAAc,GAAG,CAAAF,IAAI,aAAJA,IAAI,wBAAA9B,aAAA,GAAJ8B,IAAI,CAAEG,OAAO,cAAAjC,aAAA,wBAAAC,cAAA,GAAbD,aAAA,CAAgB,CAAC,CAAC,cAAAC,cAAA,wBAAAC,qBAAA,GAAlBD,cAAA,CAAoBiC,OAAO,cAAAhC,qBAAA,uBAA3BA,qBAAA,CAA6Bc,OAAO,KAAI,IAAI;;MAEnE;MACA,IAAIgB,cAAc,EAAE;QAClB7B,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE4B,cAAc,CAAC;QACnD,OAAOA,cAAc;MACvB,CAAC,MAAM;QACL7B,OAAO,CAACwB,KAAK,CAAC,uCAAuC,CAAC;QACtD,MAAM,IAAIE,KAAK,CAAC,uCAAuC,CAAC;MAC1D;IAEF,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdxB,OAAO,CAACwB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,IAAI5B,QAAQ,KAAKD,UAAU,GAAG,CAAC,EAAE;QAC/B,MAAM,IAAI+B,KAAK,CAAC,0CAA0C,CAAC;MAC7D;IACF;EACF;EACA,OAAO,IAAI,CAAC,CAAC;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}