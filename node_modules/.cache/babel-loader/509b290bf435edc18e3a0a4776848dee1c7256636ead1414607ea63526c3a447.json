{"ast":null,"code":"export const translateSrt = async (fileContent, apiKey, language) => {\n  const maxRetries = 6; // Maximum retry attempts\n  let retryDelay = 2000; // Initial delay in milliseconds\n\n  for (let retryCount = 0; retryCount < maxRetries; retryCount++) {\n    try {\n      var _data$choices, _data$choices$, _data$choices$$messag;\n      console.log(`Attempt ${retryCount + 1}: Sending translation request...`);\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-4\",\n          messages: [{\n            role: \"system\",\n            content: `You are an SRT translator. Translate the following subtitles to ${language}:`\n          }, {\n            role: \"user\",\n            content: fileContent\n          }]\n        })\n      });\n      if (response.status === 429) {\n        console.warn(\"Rate limit exceeded. Retrying...\");\n        const retryAfter = parseInt(response.headers.get(\"Retry-After\") || \"0\", 10);\n        const waitTime = retryAfter > 0 ? retryAfter * 1000 : retryDelay;\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n        retryDelay *= 2; // Exponential backoff\n        continue; // Retry the request\n      }\n      if (!response.ok) {\n        throw new Error(`API Request failed with status ${response.status}`);\n      }\n      const data = await response.json();\n      const translatedText = (data === null || data === void 0 ? void 0 : (_data$choices = data.choices) === null || _data$choices === void 0 ? void 0 : (_data$choices$ = _data$choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content) || null;\n      if (!translatedText) {\n        throw new Error(\"Translation result is empty.\");\n      }\n      return translatedText;\n    } catch (error) {\n      console.error(`Attempt ${retryCount + 1} failed: ${error.message}`);\n      if (retryCount === maxRetries - 1) {\n        throw new Error(\"Max retries reached. Translation failed.\");\n      }\n    }\n  }\n  return null;\n};","map":{"version":3,"names":["translateSrt","fileContent","apiKey","language","maxRetries","retryDelay","retryCount","_data$choices","_data$choices$","_data$choices$$messag","console","log","response","fetch","method","headers","Authorization","body","JSON","stringify","model","messages","role","content","status","warn","retryAfter","parseInt","get","waitTime","Promise","resolve","setTimeout","ok","Error","data","json","translatedText","choices","message","error"],"sources":["/home/user/srt-translator/src/utils/translateSrt.ts"],"sourcesContent":["export const translateSrt = async (\n  fileContent: string,\n  apiKey: string,\n  language: string\n): Promise<string | null> => {\n  const maxRetries = 6; // Maximum retry attempts\n  let retryDelay = 2000; // Initial delay in milliseconds\n\n  for (let retryCount = 0; retryCount < maxRetries; retryCount++) {\n    try {\n      console.log(`Attempt ${retryCount + 1}: Sending translation request...`);\n\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${apiKey}`,\n        },\n        body: JSON.stringify({\n          model: \"gpt-4\",\n          messages: [\n            {\n              role: \"system\",\n              content: `You are an SRT translator. Translate the following subtitles to ${language}:`,\n            },\n            { role: \"user\", content: fileContent },\n          ],\n        }),\n      });\n\n      if (response.status === 429) {\n        console.warn(\"Rate limit exceeded. Retrying...\");\n        const retryAfter = parseInt(response.headers.get(\"Retry-After\") || \"0\", 10);\n        const waitTime = retryAfter > 0 ? retryAfter * 1000 : retryDelay;\n        await new Promise((resolve) => setTimeout(resolve, waitTime));\n        retryDelay *= 2; // Exponential backoff\n        continue; // Retry the request\n      }\n\n      if (!response.ok) {\n        throw new Error(`API Request failed with status ${response.status}`);\n      }\n\n      const data = await response.json();\n      const translatedText = data?.choices?.[0]?.message?.content || null;\n\n      if (!translatedText) {\n        throw new Error(\"Translation result is empty.\");\n      }\n\n      return translatedText;\n    } catch (error) {\n      console.error(`Attempt ${retryCount + 1} failed: ${error.message}`);\n      if (retryCount === maxRetries - 1) {\n        throw new Error(\"Max retries reached. Translation failed.\");\n      }\n    }\n  }\n\n  return null;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG,MAAAA,CAC1BC,WAAmB,EACnBC,MAAc,EACdC,QAAgB,KACW;EAC3B,MAAMC,UAAU,GAAG,CAAC,CAAC,CAAC;EACtB,IAAIC,UAAU,GAAG,IAAI,CAAC,CAAC;;EAEvB,KAAK,IAAIC,UAAU,GAAG,CAAC,EAAEA,UAAU,GAAGF,UAAU,EAAEE,UAAU,EAAE,EAAE;IAC9D,IAAI;MAAA,IAAAC,aAAA,EAAAC,cAAA,EAAAC,qBAAA;MACFC,OAAO,CAACC,GAAG,CAAC,WAAWL,UAAU,GAAG,CAAC,kCAAkC,CAAC;MAExE,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;QACzEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,UAAUd,MAAM;QACjC,CAAC;QACDe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,KAAK,EAAE,OAAO;UACdC,QAAQ,EAAE,CACR;YACEC,IAAI,EAAE,QAAQ;YACdC,OAAO,EAAE,mEAAmEpB,QAAQ;UACtF,CAAC,EACD;YAAEmB,IAAI,EAAE,MAAM;YAAEC,OAAO,EAAEtB;UAAY,CAAC;QAE1C,CAAC;MACH,CAAC,CAAC;MAEF,IAAIW,QAAQ,CAACY,MAAM,KAAK,GAAG,EAAE;QAC3Bd,OAAO,CAACe,IAAI,CAAC,kCAAkC,CAAC;QAChD,MAAMC,UAAU,GAAGC,QAAQ,CAACf,QAAQ,CAACG,OAAO,CAACa,GAAG,CAAC,aAAa,CAAC,IAAI,GAAG,EAAE,EAAE,CAAC;QAC3E,MAAMC,QAAQ,GAAGH,UAAU,GAAG,CAAC,GAAGA,UAAU,GAAG,IAAI,GAAGrB,UAAU;QAChE,MAAM,IAAIyB,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAEF,QAAQ,CAAC,CAAC;QAC7DxB,UAAU,IAAI,CAAC,CAAC,CAAC;QACjB,SAAS,CAAC;MACZ;MAEA,IAAI,CAACO,QAAQ,CAACqB,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,kCAAkCtB,QAAQ,CAACY,MAAM,EAAE,CAAC;MACtE;MAEA,MAAMW,IAAI,GAAG,MAAMvB,QAAQ,CAACwB,IAAI,CAAC,CAAC;MAClC,MAAMC,cAAc,GAAG,CAAAF,IAAI,aAAJA,IAAI,wBAAA5B,aAAA,GAAJ4B,IAAI,CAAEG,OAAO,cAAA/B,aAAA,wBAAAC,cAAA,GAAbD,aAAA,CAAgB,CAAC,CAAC,cAAAC,cAAA,wBAAAC,qBAAA,GAAlBD,cAAA,CAAoB+B,OAAO,cAAA9B,qBAAA,uBAA3BA,qBAAA,CAA6Bc,OAAO,KAAI,IAAI;MAEnE,IAAI,CAACc,cAAc,EAAE;QACnB,MAAM,IAAIH,KAAK,CAAC,8BAA8B,CAAC;MACjD;MAEA,OAAOG,cAAc;IACvB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACd9B,OAAO,CAAC8B,KAAK,CAAC,WAAWlC,UAAU,GAAG,CAAC,YAAYkC,KAAK,CAACD,OAAO,EAAE,CAAC;MACnE,IAAIjC,UAAU,KAAKF,UAAU,GAAG,CAAC,EAAE;QACjC,MAAM,IAAI8B,KAAK,CAAC,0CAA0C,CAAC;MAC7D;IACF;EACF;EAEA,OAAO,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}