{"ast":null,"code":"var _jsxFileName = \"/home/user/srt-translator/src/App.tsx\",\n  _s = $RefreshSig$();\n// src/App.tsx\nimport React, { useState } from 'react';\nimport { Container, Paper, Snackbar, Alert, Button, Typography, Box, Divider, LinearProgress, Stack } from '@mui/material';\nimport FileUploader from './components/FileUploader';\nimport LanguageSelector from './components/LanguageSelector';\nimport ApiKeyInput from './components/ApiKeyInput';\nimport ApiKeyValidator from './components/ApiKeyValidator';\nimport { readFileAsText } from './utils/fileHelper';\nimport { createAnthropicConfig, createAnthropicMessage } from './utils/';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [language, setLanguage] = useState('es');\n  const [apiKey, setApiKey] = useState('');\n  const [progress, setProgress] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleFileSelect = selectedFile => {\n    setFile(selectedFile);\n    setError(null);\n    console.log('File selected:', selectedFile.name);\n  };\n  const translateWithClaude = async (content, targetLanguage) => {\n    const config = createAnthropicConfig(apiKey);\n    const prompt = `Translate the following SRT subtitle content to ${targetLanguage}. Maintain the same SRT format, including timestamps and subtitle numbers. Only translate the text content:\n\n${content}`;\n    const message = createAnthropicMessage(prompt);\n    const response = await fetch(config.baseURL, {\n      method: 'POST',\n      headers: config.headers,\n      body: JSON.stringify(message)\n    });\n    if (!response.ok) {\n      throw new Error('Translation API request failed');\n    }\n    const data = await response.json();\n    return data.content[0].text;\n  };\n  const handleTranslate = async () => {\n    if (!file || !apiKey) {\n      setError('Please provide both a file and API key');\n      return;\n    }\n    setLoading(true);\n    setProgress(0);\n    try {\n      // Read file content\n      const fileContent = await readFileAsText(file);\n\n      // Translate content using Claude\n      const translatedContent = await translateWithClaude(fileContent, language);\n\n      // Create and download the translated file\n      const blob = new Blob([translatedContent], {\n        type: 'text/plain'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `translated_${file.name}`;\n      a.click();\n      window.URL.revokeObjectURL(url);\n      setProgress(100);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Translation failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    sx: {\n      py: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        p: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        children: \"SRT Subtitle Translator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(ApiKeyInput, {\n          apiKey: apiKey,\n          onApiKeyChange: setApiKey\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ApiKeyValidator, {\n          apiKey: apiKey\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FileUploader, {\n          onFileSelect: handleFileSelect,\n          selectedFile: file\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LanguageSelector, {\n          language: language,\n          onLanguageChange: setLanguage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            onClick: handleTranslate,\n            disabled: !file || !apiKey || loading,\n            fullWidth: true,\n            children: \"Translate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), loading && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            width: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(LinearProgress, {\n            variant: \"determinate\",\n            value: progress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: !!error,\n      autoHideDuration: 6000,\n      onClose: () => setError(null),\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        onClose: () => setError(null),\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"aC29QP6OpFsMHr2BVen2W12fl70=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Container","Paper","Snackbar","Alert","Button","Typography","Box","Divider","LinearProgress","Stack","FileUploader","LanguageSelector","ApiKeyInput","ApiKeyValidator","readFileAsText","createAnthropicConfig","createAnthropicMessage","jsxDEV","_jsxDEV","App","_s","file","setFile","language","setLanguage","apiKey","setApiKey","progress","setProgress","loading","setLoading","error","setError","handleFileSelect","selectedFile","console","log","name","translateWithClaude","content","targetLanguage","config","prompt","message","response","fetch","baseURL","method","headers","body","JSON","stringify","ok","Error","data","json","text","handleTranslate","fileContent","translatedContent","blob","Blob","type","url","window","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","err","maxWidth","sx","py","children","elevation","p","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","spacing","onApiKeyChange","onFileSelect","onLanguageChange","onClick","disabled","fullWidth","width","value","open","autoHideDuration","onClose","severity","_c","$RefreshReg$"],"sources":["/home/user/srt-translator/src/App.tsx"],"sourcesContent":["// src/App.tsx\nimport React, { useState } from 'react';\nimport { \n  Container, \n  Paper, \n  Snackbar, \n  Alert, \n  Button, \n  Typography, \n  Box,\n  Divider,\n  LinearProgress,\n  Stack\n} from '@mui/material';\nimport FileUploader from './components/FileUploader';\nimport LanguageSelector from './components/LanguageSelector';\nimport ApiKeyInput from './components/ApiKeyInput';\nimport ApiKeyValidator from './components/ApiKeyValidator';\nimport { Language } from './types';\nimport { readFileAsText } from './utils/fileHelper';\nimport { createAnthropicConfig, createAnthropicMessage } from './utils/';\n\nconst App: React.FC = () => {\n  const [file, setFile] = useState<File | null>(null);\n  const [language, setLanguage] = useState<Language>('es');\n  const [apiKey, setApiKey] = useState('');\n  const [progress, setProgress] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleFileSelect = (selectedFile: File) => {\n    setFile(selectedFile);\n    setError(null);\n    console.log('File selected:', selectedFile.name);\n  };\n\n  const translateWithClaude = async (content: string, targetLanguage: string) => {\n    const config = createAnthropicConfig(apiKey);\n    const prompt = `Translate the following SRT subtitle content to ${targetLanguage}. Maintain the same SRT format, including timestamps and subtitle numbers. Only translate the text content:\n\n${content}`;\n\n    const message = createAnthropicMessage(prompt);\n\n    const response = await fetch(config.baseURL, {\n      method: 'POST',\n      headers: config.headers,\n      body: JSON.stringify(message)\n    });\n\n    if (!response.ok) {\n      throw new Error('Translation API request failed');\n    }\n\n    const data = await response.json();\n    return data.content[0].text;\n  };\n\n  const handleTranslate = async () => {\n    if (!file || !apiKey) {\n      setError('Please provide both a file and API key');\n      return;\n    }\n\n    setLoading(true);\n    setProgress(0);\n\n    try {\n      // Read file content\n      const fileContent = await readFileAsText(file);\n      \n      // Translate content using Claude\n      const translatedContent = await translateWithClaude(fileContent, language);\n      \n      // Create and download the translated file\n      const blob = new Blob([translatedContent], { type: 'text/plain' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `translated_${file.name}`;\n      a.click();\n      window.URL.revokeObjectURL(url);\n      \n      setProgress(100);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Translation failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Container maxWidth=\"md\" sx={{ py: 4 }}>\n      <Paper elevation={3} sx={{ p: 3 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          SRT Subtitle Translator\n        </Typography>\n        \n        <Stack spacing={3}>\n          <ApiKeyInput \n            apiKey={apiKey} \n            onApiKeyChange={setApiKey} \n          />\n          \n          <ApiKeyValidator \n            apiKey={apiKey}\n          />\n          \n          <Divider />\n          \n          <FileUploader \n            onFileSelect={handleFileSelect} \n            selectedFile={file}\n          />\n          \n          <LanguageSelector \n            language={language} \n            onLanguageChange={setLanguage}\n          />\n          \n          <Box>\n            <Button\n              variant=\"contained\"\n              onClick={handleTranslate}\n              disabled={!file || !apiKey || loading}\n              fullWidth\n            >\n              Translate\n            </Button>\n          </Box>\n\n          {loading && (\n            <Box sx={{ width: '100%' }}>\n              <LinearProgress variant=\"determinate\" value={progress} />\n            </Box>\n          )}\n        </Stack>\n      </Paper>\n\n      <Snackbar \n        open={!!error} \n        autoHideDuration={6000} \n        onClose={() => setError(null)}\n      >\n        <Alert severity=\"error\" onClose={() => setError(null)}>\n          {error}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SACEC,SAAS,EACTC,KAAK,EACLC,QAAQ,EACRC,KAAK,EACLC,MAAM,EACNC,UAAU,EACVC,GAAG,EACHC,OAAO,EACPC,cAAc,EACdC,KAAK,QACA,eAAe;AACtB,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,gBAAgB,MAAM,+BAA+B;AAC5D,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,eAAe,MAAM,8BAA8B;AAE1D,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SAASC,qBAAqB,EAAEC,sBAAsB,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzE,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGvB,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAW,IAAI,CAAC;EACxD,MAAM,CAAC0B,MAAM,EAAEC,SAAS,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAAC4B,QAAQ,EAAEC,WAAW,CAAC,GAAG7B,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAAC8B,OAAO,EAAEC,UAAU,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACgC,KAAK,EAAEC,QAAQ,CAAC,GAAGjC,QAAQ,CAAgB,IAAI,CAAC;EAEvD,MAAMkC,gBAAgB,GAAIC,YAAkB,IAAK;IAC/CZ,OAAO,CAACY,YAAY,CAAC;IACrBF,QAAQ,CAAC,IAAI,CAAC;IACdG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,YAAY,CAACG,IAAI,CAAC;EAClD,CAAC;EAED,MAAMC,mBAAmB,GAAG,MAAAA,CAAOC,OAAe,EAAEC,cAAsB,KAAK;IAC7E,MAAMC,MAAM,GAAG1B,qBAAqB,CAACU,MAAM,CAAC;IAC5C,MAAMiB,MAAM,GAAG,mDAAmDF,cAAc;AACpF;AACA,EAAED,OAAO,EAAE;IAEP,MAAMI,OAAO,GAAG3B,sBAAsB,CAAC0B,MAAM,CAAC;IAE9C,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACJ,MAAM,CAACK,OAAO,EAAE;MAC3CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAEP,MAAM,CAACO,OAAO;MACvBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,OAAO;IAC9B,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;IACnD;IAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACf,OAAO,CAAC,CAAC,CAAC,CAACiB,IAAI;EAC7B,CAAC;EAED,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI,CAACpC,IAAI,IAAI,CAACI,MAAM,EAAE;MACpBO,QAAQ,CAAC,wCAAwC,CAAC;MAClD;IACF;IAEAF,UAAU,CAAC,IAAI,CAAC;IAChBF,WAAW,CAAC,CAAC,CAAC;IAEd,IAAI;MACF;MACA,MAAM8B,WAAW,GAAG,MAAM5C,cAAc,CAACO,IAAI,CAAC;;MAE9C;MACA,MAAMsC,iBAAiB,GAAG,MAAMrB,mBAAmB,CAACoB,WAAW,EAAEnC,QAAQ,CAAC;;MAE1E;MACA,MAAMqC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACF,iBAAiB,CAAC,EAAE;QAAEG,IAAI,EAAE;MAAa,CAAC,CAAC;MAClE,MAAMC,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;MAC5C,MAAMO,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACrCF,CAAC,CAACG,IAAI,GAAGP,GAAG;MACZI,CAAC,CAACI,QAAQ,GAAG,cAAclD,IAAI,CAACgB,IAAI,EAAE;MACtC8B,CAAC,CAACK,KAAK,CAAC,CAAC;MACTR,MAAM,CAACC,GAAG,CAACQ,eAAe,CAACV,GAAG,CAAC;MAE/BnC,WAAW,CAAC,GAAG,CAAC;IAClB,CAAC,CAAC,OAAO8C,GAAG,EAAE;MACZ1C,QAAQ,CAAC0C,GAAG,YAAYrB,KAAK,GAAGqB,GAAG,CAAC/B,OAAO,GAAG,oBAAoB,CAAC;IACrE,CAAC,SAAS;MACRb,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEZ,OAAA,CAAClB,SAAS;IAAC2E,QAAQ,EAAC,IAAI;IAACC,EAAE,EAAE;MAAEC,EAAE,EAAE;IAAE,CAAE;IAAAC,QAAA,gBACrC5D,OAAA,CAACjB,KAAK;MAAC8E,SAAS,EAAE,CAAE;MAACH,EAAE,EAAE;QAAEI,CAAC,EAAE;MAAE,CAAE;MAAAF,QAAA,gBAChC5D,OAAA,CAACb,UAAU;QAAC4E,OAAO,EAAC,IAAI;QAACC,YAAY;QAAAJ,QAAA,EAAC;MAEtC;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eAEbpE,OAAA,CAACT,KAAK;QAAC8E,OAAO,EAAE,CAAE;QAAAT,QAAA,gBAChB5D,OAAA,CAACN,WAAW;UACVa,MAAM,EAAEA,MAAO;UACf+D,cAAc,EAAE9D;QAAU;UAAAyD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CAAC,eAEFpE,OAAA,CAACL,eAAe;UACdY,MAAM,EAAEA;QAAO;UAAA0D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChB,CAAC,eAEFpE,OAAA,CAACX,OAAO;UAAA4E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAEXpE,OAAA,CAACR,YAAY;UACX+E,YAAY,EAAExD,gBAAiB;UAC/BC,YAAY,EAAEb;QAAK;UAAA8D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB,CAAC,eAEFpE,OAAA,CAACP,gBAAgB;UACfY,QAAQ,EAAEA,QAAS;UACnBmE,gBAAgB,EAAElE;QAAY;UAAA2D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B,CAAC,eAEFpE,OAAA,CAACZ,GAAG;UAAAwE,QAAA,eACF5D,OAAA,CAACd,MAAM;YACL6E,OAAO,EAAC,WAAW;YACnBU,OAAO,EAAElC,eAAgB;YACzBmC,QAAQ,EAAE,CAACvE,IAAI,IAAI,CAACI,MAAM,IAAII,OAAQ;YACtCgE,SAAS;YAAAf,QAAA,EACV;UAED;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,EAELzD,OAAO,iBACNX,OAAA,CAACZ,GAAG;UAACsE,EAAE,EAAE;YAAEkB,KAAK,EAAE;UAAO,CAAE;UAAAhB,QAAA,eACzB5D,OAAA,CAACV,cAAc;YAACyE,OAAO,EAAC,aAAa;YAACc,KAAK,EAAEpE;UAAS;YAAAwD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtD,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAERpE,OAAA,CAAChB,QAAQ;MACP8F,IAAI,EAAE,CAAC,CAACjE,KAAM;MACdkE,gBAAgB,EAAE,IAAK;MACvBC,OAAO,EAAEA,CAAA,KAAMlE,QAAQ,CAAC,IAAI,CAAE;MAAA8C,QAAA,eAE9B5D,OAAA,CAACf,KAAK;QAACgG,QAAQ,EAAC,OAAO;QAACD,OAAO,EAAEA,CAAA,KAAMlE,QAAQ,CAAC,IAAI,CAAE;QAAA8C,QAAA,EACnD/C;MAAK;QAAAoD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEhB,CAAC;AAAClE,EAAA,CAhIID,GAAa;AAAAiF,EAAA,GAAbjF,GAAa;AAkInB,eAAeA,GAAG;AAAC,IAAAiF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}