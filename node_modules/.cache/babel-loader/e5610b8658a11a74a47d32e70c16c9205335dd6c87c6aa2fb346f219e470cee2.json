{"ast":null,"code":"var _jsxFileName = \"/home/user/srt-translator/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Typography, Container } from '@mui/material';\nimport FileUploader from './components/FileUploader';\nimport ApiKeyInput from './components/ApiKeyInput';\nimport LanguageSelector from './components/LanguageSelector';\nimport DownloadButton from './components/DownloadButton';\nimport { translateSrt } from './utils/translateSrt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [apiKey, setApiKey] = useState('');\n  const [language, setLanguage] = useState('es');\n  const [loading, setLoading] = useState(false);\n  const handleTranslate = async () => {\n    if (!file || !apiKey) {\n      alert('Please upload a file and enter an API key.');\n      return;\n    }\n    setLoading(true);\n    try {\n      const content = await file.text();\n      const translatedText = await translateSrt(apiKey, content, language);\n      if (translatedText) {\n        const blob = new Blob([translatedText], {\n          type: 'text/plain;charset=utf-8'\n        });\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `translated_${file.name}`;\n        link.click();\n        URL.revokeObjectURL(url);\n      } else {\n        alert('Translation failed.');\n      }\n    } catch (error) {\n      console.error(error);\n      alert('An error occurred.');\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    style: {\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"SRT Translator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FileUploader, {\n      onFileSelect: setFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ApiKeyInput, {\n      apiKey: apiKey,\n      setApiKey: setApiKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LanguageSelector, {\n      language: language,\n      setLanguage: setLanguage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DownloadButton, {\n      loading: loading,\n      onClick: handleTranslate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5eMy2BbLTN4qRknE796ApIqemVw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Typography","Container","FileUploader","ApiKeyInput","LanguageSelector","DownloadButton","translateSrt","jsxDEV","_jsxDEV","App","_s","file","setFile","apiKey","setApiKey","language","setLanguage","loading","setLoading","handleTranslate","alert","content","text","translatedText","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","name","click","revokeObjectURL","error","console","maxWidth","style","padding","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","onFileSelect","onClick","_c","$RefreshReg$"],"sources":["/home/user/srt-translator/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Typography, Container } from '@mui/material';\nimport FileUploader from './components/FileUploader';\nimport ApiKeyInput from './components/ApiKeyInput';\nimport LanguageSelector from './components/LanguageSelector';\nimport DownloadButton from './components/DownloadButton';\nimport { translateSrt } from './utils/translateSrt';\n\nfunction App() {\n  const [file, setFile] = useState<File | null>(null);\n  const [apiKey, setApiKey] = useState('');\n  const [language, setLanguage] = useState('es');\n  const [loading, setLoading] = useState(false);\n\n  const handleTranslate = async () => {\n    if (!file || !apiKey) {\n      alert('Please upload a file and enter an API key.');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const content = await file.text();\n      const translatedText = await translateSrt(apiKey, content, language);\n\n      if (translatedText) {\n        const blob = new Blob([translatedText], { type: 'text/plain;charset=utf-8' });\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `translated_${file.name}`;\n        link.click();\n        URL.revokeObjectURL(url);\n      } else {\n        alert('Translation failed.');\n      }\n    } catch (error) {\n      console.error(error);\n      alert('An error occurred.');\n    }\n    setLoading(false);\n  };\n\n  return (\n    <Container maxWidth=\"sm\" style={{ padding: 20 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        SRT Translator\n      </Typography>\n      \n      <FileUploader onFileSelect={setFile} />\n      <ApiKeyInput apiKey={apiKey} setApiKey={setApiKey} />\n      <LanguageSelector language={language} setLanguage={setLanguage} />\n      \n      <DownloadButton loading={loading} onClick={handleTranslate} />\n    </Container>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}