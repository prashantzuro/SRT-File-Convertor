{"ast":null,"code":"var _jsxFileName = \"/home/user/srt-translator/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Box } from \"@mui/material\";\nimport FileUploader from \"./components/FileUploader\";\nimport LanguageSelector from \"./components/LanguageSelector\";\nimport ApiKeyInput from \"./components/ApiKeyInput\";\nimport DownloadButton from \"./components/DownloadButton\";\nimport { translateSrt } from \"./utils/translateSrt\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [language, setLanguage] = useState(\"\");\n  const [apiKey, setApiKey] = useState(\"\");\n  const [translatedContent, setTranslatedContent] = useState(\"\");\n  const handleTranslateAndDownload = async () => {\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = async event => {\n      var _event$target;\n      const content = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result;\n      try {\n        const translated = await translateSrt(content, language, apiKey);\n        setTranslatedContent(translated);\n        const blob = new Blob([translated], {\n          type: \"text/plain\"\n        });\n        const link = document.createElement(\"a\");\n        link.href = URL.createObjectURL(blob);\n        link.download = `translated_${file.name}`;\n        link.click();\n      } catch (error) {\n        console.error(\"Translation failed:\", error);\n      }\n    };\n    reader.readAsText(file);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      my: 4,\n      children: [/*#__PURE__*/_jsxDEV(FileUploader, {\n        onFileSelect: setFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ApiKeyInput, {\n        apiKey: apiKey,\n        onApiKeyChange: setApiKey\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LanguageSelector, {\n        selectedLanguage: language,\n        onLanguageChange: setLanguage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DownloadButton, {\n        onClick: handleTranslateAndDownload,\n        disabled: !file || !language || !apiKey\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"PnU/ITfeCMUGlN4+1rlia0u9YlY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Container","Box","FileUploader","LanguageSelector","ApiKeyInput","DownloadButton","translateSrt","jsxDEV","_jsxDEV","App","_s","file","setFile","language","setLanguage","apiKey","setApiKey","translatedContent","setTranslatedContent","handleTranslateAndDownload","reader","FileReader","onload","event","_event$target","content","target","result","translated","blob","Blob","type","link","document","createElement","href","URL","createObjectURL","download","name","click","error","console","readAsText","children","my","onFileSelect","fileName","_jsxFileName","lineNumber","columnNumber","onApiKeyChange","selectedLanguage","onLanguageChange","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/user/srt-translator/src/App.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Container, Box } from \"@mui/material\";\nimport FileUploader from \"./components/FileUploader\";\nimport LanguageSelector from \"./components/LanguageSelector\";\nimport ApiKeyInput from \"./components/ApiKeyInput\";\nimport DownloadButton from \"./components/DownloadButton\";\nimport { translateSrt } from \"./utils/translateSrt\";\n\nconst App: React.FC = () => {\n  const [file, setFile] = useState<File | null>(null);\n  const [language, setLanguage] = useState(\"\");\n  const [apiKey, setApiKey] = useState(\"\");\n  const [translatedContent, setTranslatedContent] = useState(\"\");\n\n  const handleTranslateAndDownload = async () => {\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = async (event) => {\n      const content = event.target?.result as string;\n      try {\n        const translated = await translateSrt(content, language, apiKey);\n        setTranslatedContent(translated);\n\n        const blob = new Blob([translated], { type: \"text/plain\" });\n        const link = document.createElement(\"a\");\n        link.href = URL.createObjectURL(blob);\n        link.download = `translated_${file.name}`;\n        link.click();\n      } catch (error) {\n        console.error(\"Translation failed:\", error);\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  return (\n    <Container>\n      <Box my={4}>\n        <FileUploader onFileSelect={setFile} />\n        <ApiKeyInput apiKey={apiKey} onApiKeyChange={setApiKey} />\n        <LanguageSelector selectedLanguage={language} onLanguageChange={setLanguage} />\n        <DownloadButton onClick={handleTranslateAndDownload} disabled={!file || !language || !apiKey} />\n      </Box>\n    </Container>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}