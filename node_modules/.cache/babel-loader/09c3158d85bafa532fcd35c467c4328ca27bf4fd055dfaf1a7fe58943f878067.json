{"ast":null,"code":"export const translateSrt = async (fileContent, apiKey, language) => {\n  const maxRetries = 3;\n  let attempts = 0;\n  while (attempts < maxRetries) {\n    try {\n      var _data$choices, _data$choices$, _data$choices$$messag;\n      console.log(\"Sending translation request...\");\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          messages: [{\n            role: \"system\",\n            content: `You are an SRT translator. Translate the following subtitles to ${language}:`\n          }, {\n            role: \"user\",\n            content: fileContent\n          }]\n        })\n      });\n      if (response.status === 429) {\n        console.warn(\"Rate limit exceeded. Retrying...\");\n        attempts += 1;\n        const retryAfter = parseInt(response.headers.get(\"Retry-After\") || \"5\", 10);\n        await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));\n        continue; // Retry the request\n      }\n      if (!response.ok) {\n        console.error(\"API Request Failed:\", response.statusText);\n        throw new Error(`API Request failed with status ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"API Response Data:\", data);\n      const translatedText = (data === null || data === void 0 ? void 0 : (_data$choices = data.choices) === null || _data$choices === void 0 ? void 0 : (_data$choices$ = _data$choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content) || null;\n      if (!translatedText) {\n        console.error(\"Translation response empty.\");\n        throw new Error(\"No translation found in the response.\");\n      }\n      return translatedText;\n    } catch (error) {\n      console.error(\"Translation Error:\", error);\n      if (attempts === maxRetries - 1) {\n        throw new Error(\"Max retries reached. Translation failed.\");\n      }\n    }\n  }\n  return null; // If all retries fail\n};","map":{"version":3,"names":["translateSrt","fileContent","apiKey","language","maxRetries","attempts","_data$choices","_data$choices$","_data$choices$$messag","console","log","response","fetch","method","headers","Authorization","body","JSON","stringify","model","messages","role","content","status","warn","retryAfter","parseInt","get","Promise","resolve","setTimeout","ok","error","statusText","Error","data","json","translatedText","choices","message"],"sources":["/home/user/srt-translator/src/utils/translateSrt.ts"],"sourcesContent":["export const translateSrt = async (\n  fileContent: string, \n  apiKey: string, \n  language: string\n): Promise<string | null> => {\n  const maxRetries = 3;\n  let attempts = 0;\n\n  while (attempts < maxRetries) {\n    try {\n      console.log(\"Sending translation request...\");\n\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${apiKey}`,\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          messages: [\n            {\n              role: \"system\",\n              content: `You are an SRT translator. Translate the following subtitles to ${language}:`,\n            },\n            { role: \"user\", content: fileContent },\n          ],\n        }),\n      });\n\n      if (response.status === 429) {\n        console.warn(\"Rate limit exceeded. Retrying...\");\n        attempts += 1;\n        const retryAfter = parseInt(response.headers.get(\"Retry-After\") || \"5\", 10);\n        await new Promise((resolve) => setTimeout(resolve, retryAfter * 1000));\n        continue; // Retry the request\n      }\n\n      if (!response.ok) {\n        console.error(\"API Request Failed:\", response.statusText);\n        throw new Error(`API Request failed with status ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log(\"API Response Data:\", data);\n\n      const translatedText = data?.choices?.[0]?.message?.content || null;\n\n      if (!translatedText) {\n        console.error(\"Translation response empty.\");\n        throw new Error(\"No translation found in the response.\");\n      }\n\n      return translatedText;\n    } catch (error) {\n      console.error(\"Translation Error:\", error);\n      if (attempts === maxRetries - 1) {\n        throw new Error(\"Max retries reached. Translation failed.\");\n      }\n    }\n  }\n  return null; // If all retries fail\n};\n"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG,MAAAA,CAC1BC,WAAmB,EACnBC,MAAc,EACdC,QAAgB,KACW;EAC3B,MAAMC,UAAU,GAAG,CAAC;EACpB,IAAIC,QAAQ,GAAG,CAAC;EAEhB,OAAOA,QAAQ,GAAGD,UAAU,EAAE;IAC5B,IAAI;MAAA,IAAAE,aAAA,EAAAC,cAAA,EAAAC,qBAAA;MACFC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAE7C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;QACzEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,UAAUb,MAAM;QACjC,CAAC;QACDc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,KAAK,EAAE,eAAe;UACtBC,QAAQ,EAAE,CACR;YACEC,IAAI,EAAE,QAAQ;YACdC,OAAO,EAAE,mEAAmEnB,QAAQ;UACtF,CAAC,EACD;YAAEkB,IAAI,EAAE,MAAM;YAAEC,OAAO,EAAErB;UAAY,CAAC;QAE1C,CAAC;MACH,CAAC,CAAC;MAEF,IAAIU,QAAQ,CAACY,MAAM,KAAK,GAAG,EAAE;QAC3Bd,OAAO,CAACe,IAAI,CAAC,kCAAkC,CAAC;QAChDnB,QAAQ,IAAI,CAAC;QACb,MAAMoB,UAAU,GAAGC,QAAQ,CAACf,QAAQ,CAACG,OAAO,CAACa,GAAG,CAAC,aAAa,CAAC,IAAI,GAAG,EAAE,EAAE,CAAC;QAC3E,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAEJ,UAAU,GAAG,IAAI,CAAC,CAAC;QACtE,SAAS,CAAC;MACZ;MAEA,IAAI,CAACd,QAAQ,CAACoB,EAAE,EAAE;QAChBtB,OAAO,CAACuB,KAAK,CAAC,qBAAqB,EAAErB,QAAQ,CAACsB,UAAU,CAAC;QACzD,MAAM,IAAIC,KAAK,CAAC,kCAAkCvB,QAAQ,CAACY,MAAM,EAAE,CAAC;MACtE;MAEA,MAAMY,IAAI,GAAG,MAAMxB,QAAQ,CAACyB,IAAI,CAAC,CAAC;MAClC3B,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEyB,IAAI,CAAC;MAEvC,MAAME,cAAc,GAAG,CAAAF,IAAI,aAAJA,IAAI,wBAAA7B,aAAA,GAAJ6B,IAAI,CAAEG,OAAO,cAAAhC,aAAA,wBAAAC,cAAA,GAAbD,aAAA,CAAgB,CAAC,CAAC,cAAAC,cAAA,wBAAAC,qBAAA,GAAlBD,cAAA,CAAoBgC,OAAO,cAAA/B,qBAAA,uBAA3BA,qBAAA,CAA6Bc,OAAO,KAAI,IAAI;MAEnE,IAAI,CAACe,cAAc,EAAE;QACnB5B,OAAO,CAACuB,KAAK,CAAC,6BAA6B,CAAC;QAC5C,MAAM,IAAIE,KAAK,CAAC,uCAAuC,CAAC;MAC1D;MAEA,OAAOG,cAAc;IACvB,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdvB,OAAO,CAACuB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,IAAI3B,QAAQ,KAAKD,UAAU,GAAG,CAAC,EAAE;QAC/B,MAAM,IAAI8B,KAAK,CAAC,0CAA0C,CAAC;MAC7D;IACF;EACF;EACA,OAAO,IAAI,CAAC,CAAC;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}