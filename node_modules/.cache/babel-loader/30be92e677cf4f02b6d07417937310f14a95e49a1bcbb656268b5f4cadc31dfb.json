{"ast":null,"code":"import { AnthropicError } from \"../../error.mjs\";\nimport { readableStreamAsyncIterable } from \"../../streaming.mjs\";\nimport { LineDecoder } from \"./line.mjs\";\nexport class JSONLDecoder {\n  constructor(iterator, controller) {\n    this.iterator = iterator;\n    this.controller = controller;\n  }\n  async *decoder() {\n    const lineDecoder = new LineDecoder();\n    for await (const chunk of this.iterator) {\n      for (const line of lineDecoder.decode(chunk)) {\n        yield JSON.parse(line);\n      }\n    }\n    for (const line of lineDecoder.flush()) {\n      yield JSON.parse(line);\n    }\n  }\n  [Symbol.asyncIterator]() {\n    return this.decoder();\n  }\n  static fromResponse(response, controller) {\n    if (!response.body) {\n      controller.abort();\n      throw new AnthropicError(`Attempted to iterate over a response with no body`);\n    }\n    return new JSONLDecoder(readableStreamAsyncIterable(response.body), controller);\n  }\n}","map":{"version":3,"names":["AnthropicError","readableStreamAsyncIterable","LineDecoder","JSONLDecoder","constructor","iterator","controller","decoder","lineDecoder","chunk","line","decode","JSON","parse","flush","Symbol","asyncIterator","fromResponse","response","body","abort"],"sources":["/home/user/srt-translator/node_modules/@anthropic-ai/sdk/src/internal/decoders/jsonl.ts"],"sourcesContent":["import { AnthropicError } from \"../../error.js\";\nimport { readableStreamAsyncIterable } from \"../../streaming.js\";\nimport { type Response } from \"../../_shims/index.js\";\nimport { LineDecoder, type Bytes } from \"./line.js\";\n\nexport class JSONLDecoder<T> {\n  controller: AbortController;\n\n  constructor(\n    private iterator: AsyncIterableIterator<Bytes>,\n    controller: AbortController,\n  ) {\n    this.controller = controller;\n  }\n\n  private async *decoder(): AsyncIterator<T, any, undefined> {\n    const lineDecoder = new LineDecoder();\n    for await (const chunk of this.iterator) {\n      for (const line of lineDecoder.decode(chunk)) {\n        yield JSON.parse(line);\n      }\n    }\n\n    for (const line of lineDecoder.flush()) {\n      yield JSON.parse(line);\n    }\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<T> {\n    return this.decoder();\n  }\n\n  static fromResponse<T>(response: Response, controller: AbortController): JSONLDecoder<T> {\n    if (!response.body) {\n      controller.abort();\n      throw new AnthropicError(`Attempted to iterate over a response with no body`);\n    }\n\n    return new JSONLDecoder(readableStreamAsyncIterable<Bytes>(response.body), controller);\n  }\n}\n"],"mappings":"SAASA,cAAc,QAAE;SAChBC,2BAA2B,QAAE;SAE7BC,WAAW,QAAc;AAElC,OAAM,MAAOC,YAAY;EAGvBC,YACUC,QAAsC,EAC9CC,UAA2B;IADnB,KAAAD,QAAQ,GAARA,QAAQ;IAGhB,IAAI,CAACC,UAAU,GAAGA,UAAU;EAC9B;EAEQ,OAAOC,OAAOA,CAAA;IACpB,MAAMC,WAAW,GAAG,IAAIN,WAAW,EAAE;IACrC,WAAW,MAAMO,KAAK,IAAI,IAAI,CAACJ,QAAQ,EAAE;MACvC,KAAK,MAAMK,IAAI,IAAIF,WAAW,CAACG,MAAM,CAACF,KAAK,CAAC,EAAE;QAC5C,MAAMG,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;;;IAI1B,KAAK,MAAMA,IAAI,IAAIF,WAAW,CAACM,KAAK,EAAE,EAAE;MACtC,MAAMF,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;;EAE1B;EAEA,CAACK,MAAM,CAACC,aAAa,IAAC;IACpB,OAAO,IAAI,CAACT,OAAO,EAAE;EACvB;EAEA,OAAOU,YAAYA,CAAIC,QAAkB,EAAEZ,UAA2B;IACpE,IAAI,CAACY,QAAQ,CAACC,IAAI,EAAE;MAClBb,UAAU,CAACc,KAAK,EAAE;MAClB,MAAM,IAAIpB,cAAc,CAAC,mDAAmD,CAAC;;IAG/E,OAAO,IAAIG,YAAY,CAACF,2BAA2B,CAAQiB,QAAQ,CAACC,IAAI,CAAC,EAAEb,UAAU,CAAC;EACxF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}